# main.py
import os
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI

from core.world_model import WorldModel
from agents.chief_strategist import ChiefStrategist
from agents.expert_team import ExpertTeam
from agents.search_agent import SearchAgent 

def main():
    # --- ИНИЦИАЛИЗАЦИЯ ---
    load_dotenv()
    print("Инициализация системы 'Автономный Проектный Офис'...")
    
    # Инициализация всех необходимых моделей LLM
    try:
        llms = {
            "strategist": ChatGoogleGenerativeAI(model="models/gemini-2.5-pro", google_api_key=os.getenv("GOOGLE_API_KEY")),
            "expert_flash": ChatGoogleGenerativeAI(model="models/gemini-2.5-flash", google_api_key=os.getenv("GOOGLE_API_KEY")),
            "expert_lite": ChatGoogleGenerativeAI(model="models/gemini-2.5-flash-lite", google_api_key=os.getenv("GOOGLE_API_KEY")),
        }
        print("-> Модели LLM успешно инициализированы.")
    except Exception as e:
        print(f"!!! КРИТИЧЕСКАЯ ОШИБКА: Не удалось инициализировать модели LLM. Проверьте GOOGLE_API_KEY. Ошибка: {e}")
        return

    # Инициализация WorldModel с полным статическим контекстом
    world_model = WorldModel(
        static_context={
            "project_owner_profile": "Python-разработчик с навыками в FastAPI/LangChain и пониманием LLM. Цель - получить позицию Project Owner.",
            "initial_brief": "Идеи: 'Карьерный Навигатор', 'AI-Агент', 'Talent-as-a-Service', адаптированные для B2B HR-рынка.",
            "tsu_assets_analysis": """
**ВХОДНОЙ БРИФ ДЛЯ ВЕРИФИКАЦИИ И УГЛУБЛЕНИЯ:**

**1. Сводный Анализ Продуктового Портфеля ТГУ**
*   **Ключевая Синергия:** Портфель представляет собой взаимодополняющую экосистему с технологическим ядром в виде платформы LMS IDO (модифицированный Moodle). Остальные продукты (ИИ-оценщик, Цифровой Репетитор) спроектированы как интегрируемые модули (плагины, LTI-сервисы), что позволяет собирать данные о деятельности пользователя в едином пространстве.
*   **Текущие Целевые Рынки:** Продукты преимущественно ориентированы на сектор образования (B2Edu) и госсектор (B2G). Основные клиенты - вузы и школы. Выход на корпоративный B2B HR-рынок является гипотезой, а не текущей реальностью.
*   **Технологическое Ядро:** Состоит из двух компонентов: 1) Open-source платформа Moodle, кастомизированная до продукта LMS IDO (зарегистрирован в реестре отечественного ПО). 2) Собственные наработки в области прикладного ИИ (нейросетевые модели для анализа текста, адаптивные алгоритмы).

**2. Детальный Разбор Ключевых Активов для B2B HR-Tech**
*   **Продукт: ИИ-оценщик**
    *   **Подтвержденные Сильные Стороны:** Автоматизирует проверку письменных работ, предоставляет студентам детальную обратную связь в реальном времени. Позволяет задавать критерии оценки. Заявлен как уникальное решение на рынке РФ.
    *   **Потенциальные Слабые Стороны / "Слепые Зоны":**
        1.  **Ограниченность Домена:** Разработчики признают, что система лучше работает с гуманитарными текстами и дает ошибки на STEM-контенте. Это критический риск при адаптации к разнообразным корпоративным тематикам.
        2.  **Неполная Автономность:** Продукт находится в стадии бета-тестирования и требует обязательной "постпроверки" преподавателем. Это не соответствует ожиданиям B2B-рынка от полностью автоматизированного решения.
        3.  **Проблема Доверия:** Существуют риски, связанные с формальностью и потенциальной предвзятостью AI-оценки, что может быть неприемлемо при оценке персонала.
        4.  **Зависимость от Платформы:** Реализован как плагин для Moodle, что потребует значительной адаптации для интеграции с другими корпоративными LMS или HRIS.
    *   **Предварительная Оценка Готовности к B2B HR-рынку: 3/10.** Продукт является экспериментальным академическим инструментом, а не готовым корпоративным решением.

*   **Продукт: LMS IDO**
    *   **Подтвержденные Сильные Стороны:** Готовая к внедрению LMS на базе Moodle с техподдержкой от ТГУ. Модульная архитектура, соответствие требованиям РФ (реестр ПО), доказанная работоспособность в крупных вузах.
    *   **Потенциальные Слабые Стороны / "Слепые Зоны":**
        1.  **Устаревший UI/UX:** "Базовый" интерфейс Moodle считается перегруженным и неинтуитивным по сравнению с современными SaaS-решениями, к которым привык корпоративный сектор.
        2.  **Риски Производительности:** Moodle может сталкиваться с проблемами производительности и "узкими местами" при масштабировании на десятки тысяч активных корпоративных пользователей без серьезной оптимизации инфраструктуры.
        3.  **Академическая Направленность:** Функционал "из коробки" заточен под учебные, а не под HR-процессы. Отсутствуют ключевые для B2B HR модули (управление KPI, комплаенс-обучение, performance review).
    *   **Предварительная Оценка Готовности к B2B HR-рынку: 5/10.** Платформа является прочным технологическим фундаментом, но требует значительной доработки UI/UX и функционала для соответствия ожиданиям корпоративных клиентов.

**3. Анализ Второстепенных и Скрытых Активов**
*   **Продукт: Telegram-бот 'Expecto Patronum'**
    *   **Анализ:** Этот актив доказывает наличие у ТГУ компетенций в создании чат-ботов и автоматизации коммуникаций со студентами. Это является важным технологическим и методологическим прототипом для реализации идеи "AI-Ментора" из первоначальной записки.
*   **Проект: "РосНавык"**
    *   **Анализ:** Этот сервис, разработанный при участии ТГУ, демонстрирует способность университета анализировать рынок труда и говорить с бизнесом на языке навыков и компетенций. Это ключевой актив для реализации идеи "Карьерного Навигатора", так как он может поставлять реальные рыночные данные для построения карьерных треков.
*   **Проект: "Кампусная карта" на блокчейне**
    *   **Анализ:** Демонстрирует наличие у ТГУ R&D-компетенций в области верифицируемых цифровых креденшелов. Это прямой технологический фундамент для реализации долгосрочной идеи "Web3-диплома" или "верифицируемого профиля навыков".

**4. Синтез с Видением Project Owner**
*   Идеи "Карьерный Навигатор", "AI-Агент" и "Talent-as-a-Service" являются крайне релевантными, так как они напрямую используют сильные стороны ТГУ (экспертиза в AI, аналитика рынка труда) для решения проблем, порожденных слабыми сторонами базовых активов (академическая направленность Moodle).
*   **Предварительный вывод:** Наиболее жизнеспособной стратегией является не продажа существующих продуктов "как есть", а их **глубокая пересборка и комбинация** для создания нового, рыночно-ориентированного B2B HR-продукта.

**ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ ДЛЯ СИСТЕМЫ:**
- Необходимо провести открытый поиск других EdTech-проектов, стартапов и цифровых инициатив, связанных с ТГУ, чтобы убедиться, что все активы учтены.
""",
            "project_location": {
                "city": "Томск, Россия",
                "comment": "С высокой вероятностью (90%) основная команда разработки будет находиться здесь. Финансовые расчеты (зарплаты, аренда) должны в первую очередь учитывать этот регион. Если данных по региону нет, использовать данные по Москве/РФ с предложением поправочного коэффициента."
            },
            "main_goal": "Создать убедительную аналитическую записку для коммерческого директора ТГУ о создании новой B2B HR-Tech платформы."
        }
    )

    # Инициализация Агентов
    search_agent = SearchAgent(api_key=os.getenv("GOOGLE_SEARCH_API_KEY"), cx_id=os.getenv("SEARCH_ENGINE_ID"), cache_dir=world_model.cache_dir)
    expert_team = ExpertTeam(llms, search_agent)
    strategist = ChiefStrategist(llms["strategist"])
    
    # --- ЗАПУСК РАБОТЫ ---
    print("\n--- ЗАПУСК ОСНОВНОГО ЦИКЛА ОРКЕСТРАТОРА ---")

    plan = strategist.create_strategic_plan(world_model.get_full_context())
    world_model.update_strategic_plan(plan)

    while True:
        active_tasks = world_model.get_active_tasks()
        
        if not active_tasks:
            print("\n--- Все задачи текущей фазы выполнены. Запускаю рефлексию Стратега... ---")
            updated_plan = strategist.reflect_and_update_plan(world_model.get_full_context())
            world_model.update_strategic_plan(updated_plan)
            
            if updated_plan.get("main_goal_status") == "READY_FOR_FINAL_BRIEF":
                print("--- Стратег решил, что информации достаточно. Переходим к написанию финального отчета. ---")
                break
            
            if not world_model.get_active_tasks():
                print("!!! ВНИМАНИЕ: Стратег завершил фазу, но не создал новых задач и не завершил проект. Остановка во избежание бесконечного цикла.")
                break
            
            continue

        task_to_run = active_tasks[0]
        claims = expert_team.execute_task(task_to_run, world_model.get_full_context())
        
        if claims:
            world_model.add_claims_to_kb(claims)
            world_model.update_task_status(task_to_run['task_id'], 'COMPLETED')
        else:
            world_model.update_task_status(task_to_run['task_id'], 'FAILED')
            
        world_model.log_transaction({'task': task_to_run, 'results': claims if claims else "No claims generated"})

    # --- ФИНАЛЬНЫЙ ОТЧЕТ ---
    print("\n--- Создание финального отчета... ---")
    final_brief = strategist.write_final_brief(world_model.get_full_context())
    final_file_path = os.path.join(world_model.output_dir, "Final_Brief.md")
    
    try:
        with open(final_file_path, "w", encoding="utf-8") as f:
            f.write(final_brief)
        print(f"\n--- РАБОТА УСПЕШНО ЗАВЕРШЕНА ---")
        print(f"Финальный отчет сохранен в {final_file_path}")
    except Exception as e:
        print(f"!!! КРИТИЧЕСКАЯ ОШИБКА: Не удалось сохранить финальный отчет. Ошибка: {e}")


if __name__ == "__main__":
    main()