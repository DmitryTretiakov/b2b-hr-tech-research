# agents/chief_strategist.py
import json
from utils.helpers import robust_json_parser # ИСПОЛЬЗУЕМ НОВЫЙ ПАРСЕР

class ChiefStrategist:
    """
    "Мозг" системы. Создает план, проводит рефлексию и пишет финальные отчеты.
    Работает с самой мощной моделью (gemini-2.5-pro).
    """
    def __init__(self, llm):
        self.llm = llm
        print("-> ChiefStrategist (на базе gemini-2.5-pro) готов к работе.")
    def _invoke_llm_with_retry(self, prompt: str, is_json_output: bool = True):
        """
        Улучшенная "умная" обертка для вызова LLM с самокоррекцией.
        Возвращает пустой объект в случае полного провала.
        """
        print("   [Стратег] -> Вызов LLM...")
        try:
            response = self.llm.invoke(prompt)
            content = response.content
        except Exception as e:
            print(f"!!! КРИТИЧЕСКАЯ ОШИБКА LLM: Вызов API провалился. Ошибка: {e}")
            return {} if is_json_output else ""

        if not is_json_output:
            return content

        parsed_json = robust_json_parser(content)
        if parsed_json:
            print("   [Стратег] <- Ответ LLM успешно распарсен.")
            return parsed_json
        
        print("   [Стратег] !!! Ответ LLM не является валидным JSON. Запускаю самокоррекцию...")
        correction_prompt = f"""Твой предыдущий ответ был невалидным JSON. Исправь его.
Верни ТОЛЬКО и ИСКЛЮЧИТЕЛЬНО валидный JSON без дополнительного текста.
ОШИБОЧНЫЙ ОТВЕТ:\n---\n{content}\n---\nИСПРАВЛЕННЫЙ JSON:"""
        
        try:
            correction_response = self.llm.invoke(correction_prompt)
            corrected_json = robust_json_parser(correction_response.content)
        except Exception as e:
            print(f"!!! КРИТИЧЕСКАЯ ОШИБКА LLM: Вызов API самокоррекции провалился. Ошибка: {e}")
            return {}

        if corrected_json:
            print("   [Стратег] <- Самокоррекция прошла успешно.")
            return corrected_json
        else:
            print("   [Стратег] !!! КРИТИЧЕСКАЯ ОШИБКА: Самокоррекция не удалась.")
            return {} # Возвращаем пустой словарь вместо None

    def create_strategic_plan(self, world_model_context: dict) -> dict:
        """
        Генерирует первоначальный, многофазовый и бизнес-ориентированный план исследования.
        """
        print("   [Стратег] Шаг 1: Создаю первоначальный стратегический план...")
        
        prompt = f"""**ОБЩИЙ КОНТЕКСТ ПРОЕКТА:**
---
{json.dumps(world_model_context['static_context'], ensure_ascii=False, indent=2)}
---
**ТВОЯ РОЛЬ:** Ты - Главный Продуктовый Стратег с сильным коммерческим чутьем. Твоя первая задача - создать комплексный, пошаговый план исследования для принятия инвестиционного решения.
**КЛЮЧЕВОЙ ПРИНЦИП ПЛАНИРОВАНИЯ:** План должен быть сфокусирован на поиске коммерчески жизнеспособных гипотез. Каждая задача должна в конечном итоге помогать ответить на вопрос "Как мы на этом заработаем и почему это выгодно для ТГУ?".
**ТВОЯ ЗАДАЧА:** Проанализируй "ВХОДНОЙ БРИФ ДЛЯ ВЕРИФИКАЦИИ". Сгенерируй долгосрочный стратегический план из 3-4 логических фаз. **ПЕРВАЯ ФАЗА** должна быть посвящена **"Глубокой Разведке Активов ТГУ"**. Последующие фазы должны быть направлены на анализ рынка, конкурентов, разработку бизнес-кейса и MVP. Для каждой фазы создай список из 2-4 первоочередных, практически-ориентированных задач.
**ДОСТУПНЫЕ ЭКСПЕРТЫ:** `HR_Expert`, `Finance_Expert`, `Competitor_Expert`, `Tech_Expert`, `ProductOwnerAgent`.

**ПРИМЕР ВЫВОДА (СТРУКТУРА):**
```json
{{
  "main_goal_status": "IN_PROGRESS",
  "phases": [
    {{
      "phase_name": "Phase 1: Глубокая Разведка Активов ТГУ", "status": "IN_PROGRESS",
      "tasks": [
        {{"task_id": "task_001", "assignee": "Tech_Expert", "description": "Проверить утверждение о проблемах с производительностью Moodle при масштабировании.", "goal": "Оценить стоимость устранения технического долга Moodle.", "status": "PENDING"}}
      ]
    }},
    {{
      "phase_name": "Phase 2: Анализ Рынка и Формирование Бизнес-Кейса", "status": "PENDING", "tasks": []
    }}
  ]
}}
```
Твой стратегический план:"""
        
        plan = self._invoke_llm_with_retry(prompt)

        if plan and isinstance(plan, dict) and "phases" in plan:
            print("   [Стратег] Первоначальный план успешно сгенерирован.")
            return plan
        else:
            print("!!! Стратег: Не удалось сгенерировать первоначальный план. Используется план по умолчанию.")
            return {"main_goal_status": "FAILED", "phases": []}
    def reflect_and_update_plan(self, world_model_context: dict) -> dict:
        """
        НОВЫЙ ДВУХШАГОВЫЙ ПРОЦЕСС РЕФЛЕКСИИ
        """
        print("   [Стратег] Шаг X: Провожу интеллектуальную рефлексию...")
        
        # Шаг А: Осмысление ситуации (генерация текста)
        situation_summary = self._summarize_situation(world_model_context)
        if not situation_summary:
            print("!!! Стратег: Не удалось осмыслить ситуацию. План не будет обновлен.")
            return world_model_context['dynamic_knowledge']['strategic_plan']

        # Шаг Б: Превращение осмысления в конкретный план (генерация JSON)
        updated_plan = self._generate_updated_plan(situation_summary, world_model_context)

        if updated_plan and "phases" in updated_plan:
            print("   [Стратег] Рефлексия завершена. План обновлен.")
            return updated_plan
        else:
            print("!!! Стратег: Не удалось сгенерировать обновленный план. План не будет обновлен.")
            return world_model_context['dynamic_knowledge']['strategic_plan']

    def _summarize_situation(self, world_model_context: dict) -> str:
        """Шаг А рефлексии: Анализ и выводы в свободной форме."""
        print("      [Стратег.Рефлексия] Шаг А: Анализирую текущую ситуацию...")
        prompt = f"""**ТВОЯ РОЛЬ:** Главный Продуктовый Стратег.
**ТВОЯ ЗАДАЧА:** Проанализировать все имеющиеся данные по завершенной фазе исследования и написать краткую сводку (summary) в свободной форме.

**ПОЛНЫЙ КОНТЕКСТ И РЕЗУЛЬТАТЫ:**
---
{json.dumps(world_model_context, ensure_ascii=False, indent=2)}
---

**ТВОЙ МЫСЛИТЕЛЬНЫЙ ПРОЦЕСС:**
1.  **Проанализируй проваленные задачи (status: FAILED):** В чем причина? Критична ли потеря этой информации?
2.  **Оцени полноту Базы Знаний:** Достаточно ли собранных "Утверждений" для достижения целей завершенной фазы? Какие главные инсайты мы получили?
3.  **Сформулируй выводы:** Напиши 3-4 абзаца с ключевыми выводами и определи, готова ли команда переходить к следующей фазе или нужно провести дополнительное исследование.

Твоя аналитическая сводка:"""
        
        return self._invoke_llm_with_retry(prompt, is_json_output=False)

    def _generate_updated_plan(self, situation_summary: str, world_model_context: dict) -> dict:
        """Шаг Б рефлексии: Превращение выводов в конкретный JSON-план."""
        print("      [Стратег.Рефлексия] Шаг Б: Превращаю выводы в конкретный план...")
        original_plan_str = json.dumps(world_model_context['dynamic_knowledge']['strategic_plan'], ensure_ascii=False, indent=2)

        prompt = f"""**ТВОЯ РОЛЬ:** Ассистент-планировщик.
**ТВОЯ ЗАДАЧА:** Тебе предоставлены выводы от Главного Стратега и оригинальный план. Твоя задача - обновить оригинальный план в соответствии с выводами.

**ВЫВОДЫ ГЛАВНОГО СТРАТЕГА:**
---
{situation_summary}
---

**ОРИГИНАЛЬНЫЙ ПЛАН:**
---
{original_plan_str}
---

**ИНСТРУКЦИИ ПО ОБНОВЛЕНИЮ:**
1.  Заверши текущую активную фазу (измени ее статус на "COMPLETED").
2.  Если Стратег решил, что нужно дополнительное исследование, добавь новые задачи в **текущую** или **следующую** фазу.
3.  Если Стратег решил, что все готово, начни следующую фазу или, если это последняя, измени `main_goal_status` на `READY_FOR_FINAL_BRIEF`.
4.  Верни **полностью обновленный объект стратегического плана** в формате JSON. Убедись, что новые `task_id` уникальны.

Твой обновленный JSON-план:"""

        return self._invoke_llm_with_retry(prompt, is_json_output=True)


    def write_executive_summary(self, world_model_context: dict) -> str:
        """Пишет короткую (2-3 страницы) аналитическую записку для коммерческого директора."""
        print("   [Стратег] Финальный Шаг (1/2): Пишу краткую аналитическую записку для руководства...")
        # ... (код метода без изменений) ...
        prompt = f"""**ТВОЯ РОЛЬ:** Ты - Главный Продуктовый Стратег. Твоя аудитория - коммерческий директор. Его волнуют цифры, риски, ROI и конкурентные преимущества. Избегай академического языка.
**ТВОЯ ЗАДАЧА:** На основе ВСЕЙ собранной информации, напиши убедительную аналитическую записку. Объем: не более 3 страниц. Стиль: Максимально сжатый, по делу.
**КОНТЕКСТ И БАЗА ЗНАНИЙ:**\n---\n{json.dumps(world_model_context, ensure_ascii=False, indent=2)}\n---
**СТРУКТУРА АНАЛИТИЧЕСКОЙ ЗАПИСКИ (2-3 СТРАНИЦЫ):**
1.  **Резюме для Руководителя (Executive Summary):** Краткая суть (возможность, решение, выгода, запрос).
2.  **Анализ Рынка и Ключевая Возможность:** Самые важные цифры и выводы.
3.  **Концепция Продукта "Карьерный Навигатор":** Краткое описание УТП.
4.  **Наше Уникальное Преимущество (Почему ТГУ?):** 2-3 главных аргумента.
5.  **Предварительная Бизнес-Модель и Риски:** Только ключевые моменты.
6.  **Дорожная Карта MVP и Следующие Шаги:** Четкий план действий и запрос.
**ПРАВИЛО ЦИТИРОВАНИЯ:** Каждое ключевое утверждение (цифры, факты о конкурентах) ОБЯЗАТЕЛЬНО должно сопровождаться ссылкой на доказательство в формате [Утверждение: claim_id].
Твоя финальная аналитическая записка:"""
        response = self._invoke_llm_with_retry(prompt, is_json_output=False)
        return response.content

    def write_extended_brief(self, world_model_context: dict) -> str:
        """Пишет подробный (5-10 страниц) обзор для Владельца Продукта."""
        print("   [Стратег] Финальный Шаг (2/2): Пишу подробный обзор для Владельца Продукта...")
        # ... (код метода без изменений) ...
        prompt = f"""**ТВОЯ РОЛЬ:** Ты - Главный Продуктовый Стратег. Твоя аудитория - технически подкованный Владелец Продукта, которому нужна максимальная детализация для дальнейшей работы.
**ТВОЯ ЗАДАЧА:** На основе ВСЕЙ собранной информации, напиши подробный аналитический обзор. Объем: 5-10 страниц.
**КОНТЕКСТ И БАЗА ЗНАНИЙ:**\n---\n{json.dumps(world_model_context, ensure_ascii=False, indent=2)}\n---
**СТРУКТУРА ОБЗОРА (5-10 СТРАНИЦ):**
1.  **Резюме и Ключевые Стратегические Выводы.**
2.  **Глава 1: Глубокий Анализ Активов ТГУ.** Подробный разбор сильных и слабых сторон.
3.  **Глава 2: Анализ Рынка и Трендов.** Детальный обзор с цифрами и прогнозами.
4.  **Глава 3: Конкурентный Ландшафт.** Подробные досье на каждого конкурента.
5.  **Глава 4: Продуктовая Концепция.** Детальное описание "Карьерного Навигатора".
6.  **Глава 5: Бизнес-Кейс.** Включи сюда **таблицы с предварительными расчетами** сметы на MVP и финансовой модели.
7.  **Глава 6: Дорожная Карта и Техническое Задание для MVP.**
8.  **Приложение: Полный список верифицированных 'Утверждений' (Claims)** с источниками.
**ПРАВИЛО ЦИТИРОВАНИЯ:** Используй ссылки на доказательства [Утверждение: claim_id] по всему тексту.
Твой подробный аналитический обзор:"""
        response = self._invoke_llm_with_retry(prompt, is_json_output=False)
        return response.content
